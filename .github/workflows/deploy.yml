name: Deploy to AWS S3
permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Setup Node.js
      uses: actions/setup-node@v4.4.0
      with:
        node-version: '24'
        cache: 'npm'

    - name: Install playwright && machine dependencies
      run: npx playwright install --with-deps


    - name: Install dependencies
      run: npm install

    - name: Run tests (CI optimized)
      run: npm run test:ci

    - name: Build application in a static setup
      run: npm run build:static

    - name: Upload production build
      uses: actions/upload-artifact@v4.6.2
      with:
        name: production-build
        path: build/

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        
      - name: Download production build
        uses: actions/download-artifact@v4.1.7
        with:
          name: production-build
          path: build/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7

      - name: Terraform Init
        working-directory: ./infra/terraform
        run: terraform init

      - name: Import Existing S3 Bucket if Needed
        working-directory: ./infra/terraform
        run: |
          echo "üîç Checking for existing S3 bucket..."
          
          # Check if S3 bucket exists in AWS and attempt import
          if aws s3api head-bucket --bucket ${{ secrets.DOMAIN_NAME }} 2>/dev/null; then
            echo "‚úÖ S3 bucket exists in AWS, attempting import..."
            # Try to import, but don't fail if it's already imported
            terraform import aws_s3_bucket.website ${{ secrets.DOMAIN_NAME }} || echo "‚ÑπÔ∏è  Bucket already imported or import failed (continuing)"
          else
            echo "‚ÑπÔ∏è  S3 bucket does not exist - will be created by Terraform"
          fi
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

      - name: Apply Basic Infrastructure First
        working-directory: ./infra/terraform
        run: |
          echo "üéØ Applying basic infrastructure first (S3 and ACM certificate)..."
          terraform apply -target=aws_s3_bucket.website -target=aws_s3_bucket_website_configuration.website -target=aws_s3_bucket_public_access_block.website -target=aws_s3_bucket_policy.website -target=aws_acm_certificate.website -auto-approve
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

      - name: Terraform Plan (Full)
        working-directory: ./infra/terraform
        run: terraform plan
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

      - name: Terraform Apply (Full)
        working-directory: ./infra/terraform
        run: terraform apply -auto-approve
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

      - name: Sync files to S3
        run: |
          aws s3 sync build/ s3://${{ secrets.DOMAIN_NAME }}/ --delete --exact-timestamps
          
      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[0]=='${{ secrets.DOMAIN_NAME }}'].Id" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*" 
